cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
if(x > 5) {
x <- 0
}
if(x[1] > 5) {
x <- 0
}
if(x[1] > 5) {
x <- 2:12
}
if(x > 5) {
x <- 2:12
}
x
if(x>5){x<-1}
if(x>5){x[0]<-1}
if(x[0]>5){x<-1}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f(3)
z <- 130
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(5)
f(3)
sprintf("%05d",1)
sprintf("%3d",1)
filename<-sprintf("%3d.csv",id)
filename<-sprintf("%3d.csv",1)
filename<-sprintf("%03d.csv",1)
filename<-sprintf("%03d.csv",1:12)
filename<-sprintf("%03d.csv",1)
filename<-sprintf("%03d.csv",1:12)
for(file in filename){ print(file)}
filename<-sprintf("%03d.csv",1)
for(file in filename){ print(file)}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
filename<-sprintf("%3d.csv",id)
for(file in filename)
{
filename<-directory + "\\" + file
}
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata"sulfate",1)
pollutantmean(specdata,"sulfate",1)
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
data<-read.csv("specdata\\001.csv")
mean(data["sulfate"],na.rm=TRUE)
mean(data["sulfate"],na.rm==TRUE)
data["sulfate"]
mean(data$Sulfate,na.rm==TRUE)
mean(data$sulfate,na.rm==TRUE)
mean(data$sulfate,na.rm=TRUE)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata","sulfate",1:2)
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata","sulfate",2)
pollutantmean("specdata","sulfate",3)
pollutantmean("specdata","sulfate",4)
pollutantmean("specdata","sulfate",5)
pollutantmean("specdata","sulfate",6)
pollutantmean("specdata","sulfate",7)
pollutantmean("specdata","sulfate",8)
pollutantmean("specdata","sulfate",9)
pollutantmean("specdata","sulfate",10)
source('~/.active-rstudio-document')
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1:10)
source('E:/Courses/R/R/assignment1/pollutantmean.R')
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","sulfate",70:72)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","nitrate",23)
source('E:/Courses/R/R/assignment1/submitscript1.R')
submit()
2
submit()
submit()
submit()
result<-data.frame(x= numeric(0), y= integer(0))
result
data
data[1]
data[1]
data[[1]]
data
data$id
data$id[1]
data$id[2]
data$Id[2]
View(data)
data$ID[2]
data$ID[1]
source('E:/Courses/R/R/assignment1/complete.R')
source('E:/Courses/R/R/assignment1/complete.R')
complete("specdata", 1)
complete("specdata", 1)
result
result<-data.frame(id= integer(0), nobs= integer(0))
result
newResultRow<-c(data$ID[1],1)
newResultRow
complete("specdata", 1)
length<-nrow(dataFiltered)
length<-nrow(data)
str(length)
str(complete)
source('E:/Courses/R/R/assignment1/complete.R')
complete("specdata", 1)
source('E:/Courses/R/R/assignment1/complete.R')
complete("specdata", 1)
source('E:/Courses/R/R/assignment1/complete.R')
complete("specdata", 1)
submit()
6
submit()
submit()
?cor
source('E:/Courses/R/R/assignment1/corr.R')
source('E:/Courses/R/R/assignment1/corr.R')
corr("specdata")
data
cor(data)
cor(data$sulfate)
cor(data$sulfate,data$nitrate)
cor(data$sulfate,data$nitrate, use = complete.obs)
cor(data$sulfate,data$nitrate, use == complete.obs)
cor(data$sulfate,data$nitrate, use = "complete.obs")
cor(data$sulfate,data$nitrate, use = "pairwise.complete.obs")
c<-cor(data$sulfate,data$nitrate, use = "complete.obs")
c
head(cr)
head(c)
summary(c)
plot(c)
d<-corr("specdata",150)
corr("specdata",150)
source('E:/Courses/R/R/assignment1/corr.R')
source('E:/Courses/R/R/assignment1/complete.R')
corr("specdata",150)
corr("specdata",150)
info
dataInfo
str(dataInfo)
str(info)
corr("specdata",150)
str(filename)
corr("specdata",150)
source('E:/Courses/R/R/assignment1/corr.R')
corr("specdata",150)
c<-corr("specdata",150)
c
head(c)
complete("specdata", 1)
complete("specdata")
source('E:/Courses/R/R/assignment1/corr.R')
c<-corr("specdata",150)
source('E:/Courses/R/R/assignment1/corr.R')
c<-corr("specdata",150)
c<-corr("specdata",150)
debugSource('E:/Courses/R/R/assignment1/corr.R')
c<-corr("specdata",150)
debugSource('E:/Courses/R/R/assignment1/corr.R')
c<-corr("specdata",150)
source('E:/Courses/R/R/assignment1/complete.R')
complete("specdata")
dataInfo<-complete("specdata")
dataInfo[nobs>=150]
dataInfo[dataInfo$nobs>=150]
dataInfo[,dataInfo$nobs>=150]
dataInfo[dataInfo$nobs>=150,]
source('E:/Courses/R/R/assignment1/corr.R')
c<-corr("specdata",150)
c
head(c)
source('E:/Courses/R/R/assignment1/corr.R')
head(c)
c<-corr("specdata",150)
head(c)
submit()
source('E:/Courses/R/R/assignment1/submitscript1.R')
submit()
submit()
submit()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
f<-makeVector()
f
f(f)
f(5)
f
c<-cachemean()
c<-cachemean(3)
c<-cachemean(3:34)
c<-cachemean(3,f)
v<-makeVector(x=1:10)
cachemean(v)
cachemean(v)
cachemean(v)
v
v[1]
v$get
v$get[1]
v$get[2]
v$get[[2]]
v$get
v$get()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y)
{
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
?matrix
m<-makeCacheMatrix(as.matrix(1:10))
m
m$get()
solve(m)
solve(m$get())
m<-makeCacheMatrix(as.matrix(1:9,nrow = 2, ncol = 3, byrow = TRUE))
m
m$get()
mdat<-matrix(
+   1:9, # the data elements
+   nrow=3,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)
mdat<-matrix(1:9, nrow=3,ncol=3, byrow = TRUE)
mdat
solve(mdat)
mdat[,2]
mdat[1,1]
mdat[1,1]=9
solve(mdat)
solve(mdat)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
m<-makeCacheMatrix(mdat)
cacheSolve(m)
m<-cacheSolve(m)
m<-cacheSolve(m)
m
m$get
m$get()
m$getinverse()
m<-cacheSolve(m)
mdat<-matrix(1:9, nrow=3,ncol=3, byrow = TRUE)
source('E:/Courses/R/ProgrammingAssignment2/cachematrix.R')
m<-makeCacheMatrix(mdat)
mi<-m$getinverse()
mi
mi<-cacheSolve(m)
mi
mi$getinverse
mi$getinverse()
source('E:/Courses/R/ProgrammingAssignment2/cachematrix.R')
m<-makeCacheMatrix(mdat)
mi<-cacheSolve(m)
View(mdat)
m$get()[1,1]=9
mdat[1,1]=9
m<-makeCacheMatrix(mdat)
mi<-cacheSolve(m)
mi
mi<-cacheSolve(m)
mi
source('E:/Courses/R/ProgrammingAssignment2/cachematrix.R')
m<-makeCacheMatrix(mdat)
mi<-cacheSolve(m)
mi
mi
mi<-cacheSolve(m)
mi<-cacheSolve(m)
source('E:/Courses/R/ProgrammingAssignment2/cachematrix.R')
m<-makeCacheMatrix(mdat)
mi<-cacheSolve(m)
mi
mdat[2,3]=13
m<-makeCacheMatrix(mdat)
mi<-cacheSolve(m)
mi
mi
mi<-cacheSolve(m)
mi
library(datasets)
data(iris)
iris
?iris
str(iris)
iris[iris$Species==virginica]
iris[,iris$Species==virginica]
iris[iris$Species==virginica,]
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
getwd()
source('E:/Courses/R/R/assignment1/submitscript1.R')
submit()
